name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/phase3-simulation-engine, feature/phase4-frontend-integration ]
  pull_request:
    branches: [ main, develop, feature/phase3-simulation-engine, feature/phase4-frontend-integration ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: architech_test
          POSTGRES_USER: github
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Ensure all history is fetched for a clean checkout

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
    # Python services linting and testing
    - name: Install Python base dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-asyncio pytest-cov

    - name: Lint Python code
      run: |
        flake8 services/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 services/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Test User Service
      env:
        DATABASE_URL: postgresql://github:test_password@localhost:5432/architech_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd services/user-service
        pip install -r requirements.txt
        pytest tests/ -v --cov=app --cov-report=xml

    - name: Test Project Service
      env:
        DATABASE_URL: postgresql://github:test_password@localhost:5432/architech_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd services/project-service
        pip install -r requirements.txt
        pytest tests/ -v --cov=app --cov-report=xml

    - name: Test Design Service
      env:
        DATABASE_URL: postgresql://github:test_password@localhost:5432/architech_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd services/design-service
        pip install -r requirements.txt
        pytest tests/ -v --cov=app --cov-report=xml

    - name: Test Simulation Orchestration Service
      env:
        DATABASE_URL: postgresql://github:test_password@localhost:5432/architech_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd services/simulation-orchestration-service
        pip install -r requirements.txt
        pytest tests/ -v --cov=app --cov-report=xml

    - name: Test API Gateway
      env:
        DATABASE_URL: postgresql://github:test_password@localhost:5432/architech_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd services/api-gateway
        pip install -r requirements.txt
        pytest tests/ -v --cov=app --cov-report=xml

    # Go simulation engine testing
    - name: Test Simulation Engine
      run: |
        cd simulation-engine
        go mod tidy
        go test -v ./...

    # Frontend testing
    - name: Test Frontend
      run: |
        if [ -d "frontend" ]; then
          cd frontend
          rm -rf node_modules
          npm ci
          npm run test
          npm run build
        fi

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/feature/phase3-simulation-engine' || github.ref == 'refs/heads/feature/phase4-frontend-integration')
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [user-service, project-service, design-service, simulation-orchestration-service, api-gateway]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  build-simulation-engine:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/feature/phase3-simulation-engine' || github.ref == 'refs/heads/feature/phase4-frontend-integration')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/simulation-engine
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./simulation-engine
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}






    - name: Start Docker Compose Services
      run: |
        sudo docker compose up -d

    - name: Wait for services to be healthy
      run: |
        sudo docker compose ps
        # Add health checks for services if needed
        # Example: docker compose logs --follow service_name | grep -q "Service healthy"
        sleep 60 # Give services time to start




    - name: Run Integration Tests
      run: |
        echo "Running integration tests..."
        # Test API endpoints are accessible
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done' || echo "API Gateway health check failed"
        # Add more integration tests as needed
        echo "Integration tests completed"

    - name: Run E2E Tests
      run: |
        echo "Running E2E tests..."
        # Test frontend can connect to backend
        cd frontend
        # Add Cypress or Playwright E2E tests here when available
        echo "E2E tests completed"


